name: Ubuntu

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.env.os }}
    env:
      VERSION: 0.1.0
    strategy:
      matrix:
        env:
          - name: Linux
            os: ubuntu-20.04
            qtplatform: linux
            qtversion: 5.15.2

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checking out the code
        uses: actions/checkout@v2
        with:
          submodules: 'true'

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.2
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
        timeout-minutes: 10
        with:
          version: ${{ matrix.env.qtversion }}
          target: desktop
          host: ${{ matrix.env.qtplatform }}
          install-deps: true

      - name: Install dependencies
        id: vars
        run: |
          echo ::set-output name=short_ref::${GITHUB_REF#refs/*/}
          sudo apt-get -qq update
          sudo apt-get -qq install libgl1-mesa-dev libxkbcommon-x11-0 libc6-i386 build-essential libgl1-mesa-dev mesa-common-dev libgles2-mesa-dev libxkbcommon-x11-0 libxcb-icccm4-dev libxcb-xinerama0 libxcb-image0 libxcb-keysyms1 libxcb-* fakeroot
          sudo apt-get -qq remove gcc g++
          sudo apt-get install -y -qq gcc-9 g++-9
          sudo ln -s /usr/bin/g++-9 /usr/bin/g++
          sudo ln -s /usr/bin/gcc-9 /usr/bin/gcc
          git clone https://github.com/lxqt/lxqt-build-tools.git
          cd lxqt-build-tools
          mkdir build
          cmake -S . -B ./build '-DCMAKE_GENERATOR:STRING=Unix Makefiles'
          cmake --build build/ --target all
          cd build/
          sudo make install
          cd ../../

      - name: Build QTermWidget
        run: |
          mkdir build
          cmake -S . -B ./build '-DCMAKE_GENERATOR:STRING=Unix Makefiles'
          cmake --build build/ --target qtermwidget5
          cp build/libqtermwidget5.so.1.* build/lib/libqtermwidget.so
          rm -rf build/lib/moc_*

      - name: Uploading QTermWidget
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: build/lib/*

      - name: Prune previous runs
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const days_to_expiration = 30;
            const ms_in_day = 86400000;
            const now = Date.now();
            const pages = 5;

            // we don't want to prune old runs from test.yml
            // because we track the duration of runs over time

            const workflows = [
              'ubuntu.yml'
            ]

            let runs_to_delete = [];

            for (const workflow of workflows) {
              for (let page = 0; page < pages; page += 1) {
                let response = await github.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  page: page,
                  per_page: 100,
                  repo: context.repo.repo,
                  workflow_id: workflow
                });

                if (response.data.workflow_runs.length > 0) {
                  for (const run of response.data.workflow_runs) {
                    if (run.head_branch == "${{ steps.vars.outputs.short_ref }}" && run.head_sha != "${GITHUB_SHA}") {
                      runs_to_delete.push([run.id, run.name]);
                    }
                  }
                }
              }
            }

            for (const run of runs_to_delete) {
              console.log(`Run id ${run[0]} of '${run[1]}' is older than ${days_to_expiration} days. Deleting...`);
              try {
                await github.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run[0]
                });
              } catch (error) {
                // ignore errors
              }
            }
